#include <iostream>
#include <string>

using namespace std;

const int N = 100;

string linearSearch(int num, int array[], int arraySize) {
    int i, iterationCount = 0;
    string result = "Skaitlis masiivaa netika atrasts";

    for (i = 0; i < arraySize && array[i] != num; i++) iterationCount++;

    if (array[i] == num) result = "Skaitlis masiivaa atrasts - vieta ar indeksu " + to_string(i) + "\nIteraaciju skaits: " + to_string(iterationCount) + "\n";

    return result;
}

string linearSearchWithBarrier(int num, int array[], int arraySize) {
    int i = 0, iterationCount = 0;
    string result = "Skaitlis masiivaa netika atrasts";
    array[arraySize] = num;

    while (array[i] != num) {
        iterationCount++;
        i++;
    }

    if (i != arraySize) result = "Skaitlis masiivaa atrasts - vieta ar indeksu " + to_string(i) + "\nIteraaciju skaits: " + to_string(iterationCount) + "\n";

    return result;
}

string binarySearch(int num, int array[], int arrayLength) {
    int left = 0 , right = arrayLength - 1, middle, iterationCount = 0;

    while (left <= right)
    {
        iterationCount++;
        middle = (right + left) / 2;
        if (array[middle] == num) return "Atrada! Index: " + to_string(middle) + "\nIteraaciju skaits: " + to_string(iterationCount) + "\n";
        else if (array[middle] > num) right = middle - 1;
        else left = middle + 1;
    }

    return "Neatrada";
}

string interpolationSearch(int num, int array[], int arrayLength) {
    int left = 0, right = arrayLength - 1, pos, iterationCount = 0;

    while (left <= right)
    {
        iterationCount++;
        pos = left + (num - array[left])*(right - left)/(array[right] - array[left]);
        if (array[pos] == num) return "Atrada! Index: " + to_string(pos) + "\nIteraaciju skaits: " + to_string(iterationCount) + "\n";
        else if (array[pos] > num) right = pos - 1;
        else left = pos + 1;
    }

    return "Neatrada";
}


int main()
{
    int arraySize, searchedNum;
    int numArray[N];

    cout << "Ievadi masiiva izmeeru: ";
    cin >> arraySize;

    bool flag = false;
    int lastVal = 0;
    for (int i = 0; i < arraySize; i++) {
        if (flag) lastVal += 2;
        else lastVal += 5;
        numArray[i] = lastVal;
    }

    cout << "\nMasiivs: ";
    for (int i = 0; i < arraySize; i++) cout << " " << numArray[i];

    cout << "\nIevadi mekleejamo skaitli: ";
    cin >> searchedNum;

    cout << endl << linearSearch(searchedNum, numArray, arraySize) << endl;
    cout << endl << linearSearchWithBarrier(searchedNum, numArray, arraySize) << endl;
    cout << endl << binarySearch(searchedNum, numArray, arraySize) << endl;
    cout << endl << interpolationSearch(searchedNum, numArray, arraySize);

    return 0;
}




#include <iostream>

using namespace std;
const int N = 50;

void bubbleSort(int arr[], int n);
void printArray(int arr[], int n);

int main()
{
    setlocale(LC_ALL, "en_US.UTF-8");

    int arr[N];
    int n;

    cout << "Ievadi masīva izmēru: ";
    cin >> n;

    for (int i = 0; i < n; i++)
    {
        cout << "Iavadi masīva " << i + 1 << ". elementu: ";
        cin >> arr[i];
    }

    cout << "Masīvs: ";
    printArray(arr, n);

    bubbleSort(arr, n);

    cout << "Sakārtots masīvs: ";
    printArray(arr, n);

    return 0;
}

void bubbleSort(int arr[], int n)
{
    cout << endl;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (arr[j] > arr[j + 1]) swap(arr[j], arr[j + 1]);
        }
    }
}

void printArray(int arr[], int n)
{
    cout << endl;
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}







//-------------------------------------------------------------

#include <iostream>

using namespace std;
const int N = 50;

void shakerSort(int arr[], int n);
void bubbleSort(int arr[], int n);
void bubbleSort2(int arr[], int n);
void printArray(int arr[], int n);

int main()
{
    setlocale(LC_ALL, "en_US.UTF-8");

    int arr[N];
    int n;

    cout << "Ievadi masiva izmeru: ";
    cin >> n;

    for (int i = 0; i < n; i++)
    {
        cout << "Iavadi masiva " << i + 1 << ". elementu: ";
        cin >> arr[i];
    }

    cout << "Masivs: ";
    printArray(arr, n);

    shakerSort(arr, n);

    cout << "Sakartots masivs: ";
    printArray(arr, n);

    //bubbleSort(arr, n);

    //cout << "Sakārtots masivs no kreisas uz labo pusi: ";
    //printArray(arr, n);

    //bubbleSort2(arr, n);

    //cout << endl << "Sakartots masivs no labas uz kreiso pusi: ";
    //printArray(arr, n);

    return 0;
}

void shakerSort(int arr[], int n)
{
    int i, j, iterCount = 0, comperisonCount = 0, swapCount = 0;
    bool goRight = true , changed = true;

    for (i = 0; i < n && changed; i++)
    {
        changed = false;
        if (goRight)
        {
            for (i = 0; i < n - iterCount; i++)
            {
                for (j = 0; j < n - i - 1; j++)
                {
                    if (arr[j] > arr[j + 1])
                    {
                        swap(arr[j], arr[j + 1]);
                        swapCount++;
                        changed = true;
                    }
                    comperisonCount++;
                }
                printArray(arr, n);
            }
        }
        else 
        {
            for (i = n - 1; i >= 0 + iterCount; i--)
            {
                for (j = n - 1; j > n - i - 1; j--)
                {
                    if (arr[j] < arr[j - 1])
                    {
                        swap(arr[j], arr[j - 1]);
                        swapCount++;
                        changed = true;
                    }
                    comperisonCount++;
                }
                printArray(arr, n);
            }
        }
        iterCount++;
        goRight = !goRight;
    }

    cout << endl << "salidzinajumu skaits: " << comperisonCount << " apmainu skaits: " << swapCount << endl;
}

void goRight()
{

}

void goLeft()
{

}

void bubbleSort(int arr[], int n)
{
        int i, j;
    
        bool changed = true;
        for (i = 0; i < n && changed; i++)
        {
            changed = false;
            for (j = 0; j < n - i - 1; j++)
            {
                if (arr[j] > arr[j + 1])
                {
                    swap(arr[j], arr[j + 1]);
                    changed = true;
                }
            }
            printArray(arr, n);
        }
}

void bubbleSort2(int arr[], int n)
{
    int i, j;
    bool changed = true;

    cout << endl;
    for (i = n - 1; i >= 0 && changed; i--)
    {
        changed = false;
        for (j = n - 1; j > n-i-1; j--)
        {
            if (arr[j] < arr[j - 1])
            {
                swap(arr[j], arr[j - 1]);
                changed = true;
            }
        }
        printArray(arr, n);
    }
}

void printArray(int arr[], int n)
{
    cout << endl;
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}

